diff -ruN apache-ranger-2.3.0.orig/agents-common/src/main/resources/service-defs/ranger-servicedef-presto.json apache-ranger-2.3.0/agents-common/src/main/resources/service-defs/ranger-servicedef-presto.json
--- apache-ranger-2.3.0.orig/agents-common/src/main/resources/service-defs/ranger-servicedef-presto.json	2023-01-25 10:29:59.930011739 +0800
+++ apache-ranger-2.3.0/agents-common/src/main/resources/service-defs/ranger-servicedef-presto.json	2023-01-27 00:14:44.505769131 +0800
@@ -96,28 +96,6 @@
     },
     {
       "itemId": 5,
-      "name": "prestouser",
-      "type": "string",
-      "level": 10,
-      "parent": "",
-      "mandatory": true,
-      "lookupSupported": false,
-      "recursiveSupported": false,
-      "excludesSupported": false,
-      "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-      "matcherOptions": {
-        "wildCard": true,
-        "ignoreCase": true
-      },
-      "validationRegEx": "",
-      "validationMessage": "",
-      "uiHint": "",
-      "label": "Presto User",
-      "description": "Presto User",
-      "accessTypeRestrictions": ["impersonate"]
-    },
-    {
-      "itemId": 6,
       "name": "systemproperty",
       "type": "string",
       "level": 10,
@@ -139,7 +117,7 @@
       "accessTypeRestrictions": ["alter"]
     },
     {
-      "itemId": 7,
+      "itemId": 6,
       "name": "sessionproperty",
       "type": "string",
       "level": 20,
@@ -159,50 +137,6 @@
       "label": "Catalog Session Property",
       "description": "Presto Catalog Session Property",
       "accessTypeRestrictions": ["alter"]
-    },
-    {
-      "itemId": 8,
-      "name": "function",
-      "type": "string",
-      "level": 10,
-      "parent": "",
-      "mandatory": true,
-      "lookupSupported": false,
-      "recursiveSupported": false,
-      "excludesSupported": false,
-      "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-      "matcherOptions": {
-        "wildCard": true,
-        "ignoreCase": true
-      },
-      "validationRegEx": "",
-      "validationMessage": "",
-      "uiHint": "",
-      "label": "Presto Function",
-      "description": "Presto Function",
-      "accessTypeRestrictions": ["execute", "grant"]
-    },
-    {
-      "itemId": 9,
-      "name": "procedure",
-      "type": "string",
-      "level": 30,
-      "parent": "schema",
-      "mandatory": true,
-      "lookupSupported": false,
-      "recursiveSupported": false,
-      "excludesSupported": false,
-      "matcher": "org.apache.ranger.plugin.resourcematcher.RangerDefaultResourceMatcher",
-      "matcherOptions": {
-        "wildCard": true,
-        "ignoreCase": true
-      },
-      "validationRegEx": "",
-      "validationMessage": "",
-      "uiHint": "",
-      "label": "Schema Procedure",
-      "description": "Schema Procedure",
-      "accessTypeRestrictions": ["execute", "grant"]
     }
   ],
   "accessTypes": [
@@ -258,11 +192,6 @@
     },
     {
       "itemId": 11,
-      "name": "impersonate",
-      "label": "Impersonate"
-    },
-    {
-      "itemId": 12,
       "name": "all",
       "label": "All",
       "impliedGrants": [
@@ -275,15 +204,8 @@
         "alter",
         "grant",
         "revoke",
-        "show",
-        "impersonate",
-        "execute"
+        "show"
       ]
-    },
-    {
-      "itemId": 13,
-      "name": "execute",
-      "label": "execute"
     }
   ],
   "configs": [
@@ -315,7 +237,7 @@
       "validationRegEx": "",
       "validationMessage": "",
       "uiHint": "",
-      "defaultValue": "io.prestosql.jdbc.PrestoDriver"
+      "defaultValue": "com.facebook.presto.jdbc.PrestoDriver"
     },
     {
       "itemId": 4,
@@ -334,140 +256,5 @@
   ],
   "policyConditions":
   [
-  ],
-  "dataMaskDef": {
-    "accessTypes": [
-      {
-        "name": "select"
-      }
-    ],
-    "resources": [
-      {
-        "name": "catalog",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "uiHint":"{ \"singleValue\":true }"
-      },
-      {
-        "name": "schema",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "uiHint":"{ \"singleValue\":true }"
-      },
-      {
-        "name": "table",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "uiHint":"{ \"singleValue\":true }"
-      },
-      {
-        "name": "column",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "uiHint":"{ \"singleValue\":true }"
-      }
-    ],
-    "maskTypes": [
-      {
-        "itemId": 1,
-        "name": "MASK",
-        "label": "Redact",
-        "description": "Replace lowercase with 'x', uppercase with 'X', digits with '0'",
-        "transformer": "cast(regexp_replace(regexp_replace(regexp_replace({col},'([A-Z])', 'X'),'([a-z])','x'),'([0-9])','0') as {type})",
-        "dataMaskOptions": {
-        }
-      },
-      {
-        "itemId": 2,
-        "name": "MASK_SHOW_LAST_4",
-        "label": "Partial mask: show last 4",
-        "description": "Show last 4 characters; replace rest with 'X'",
-        "transformer": "cast(regexp_replace({col}, '(.*)(.{4}$)', x -> regexp_replace(x[1], '.', 'X') || x[2]) as {type})"
-      },
-      {
-        "itemId": 3,
-        "name": "MASK_SHOW_FIRST_4",
-        "label": "Partial mask: show first 4",
-        "description": "Show first 4 characters; replace rest with 'x'",
-        "transformer": "cast(regexp_replace({col}, '(^.{4})(.*)', x -> x[1] || regexp_replace(x[2], '.', 'X')) as {type})"
-      },
-      {
-        "itemId": 4,
-        "name": "MASK_HASH",
-        "label": "Hash",
-        "description": "Hash the value of a varchar with sha256",
-        "transformer": "cast(to_hex(sha256(to_utf8({col}))) as {type})"
-      },
-      {
-        "itemId": 5,
-        "name": "MASK_NULL",
-        "label": "Nullify",
-        "description": "Replace with NULL"
-      },
-      {
-        "itemId": 6,
-        "name": "MASK_NONE",
-        "label": "Unmasked (retain original value)",
-        "description": "No masking"
-      },
-      {
-        "itemId": 12,
-        "name": "MASK_DATE_SHOW_YEAR",
-        "label": "Date: show only year",
-        "description": "Date: show only year",
-        "transformer": "date_trunc('year', {col})"
-      },
-      {
-        "itemId": 13,
-        "name": "CUSTOM",
-        "label": "Custom",
-        "description": "Custom"
-      }
-    ]
-  },
-  "rowFilterDef": {
-    "accessTypes": [
-      {
-        "name": "select"
-      }
-    ],
-    "resources": [
-      {
-        "name": "catalog",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "mandatory": true,
-        "uiHint": "{ \"singleValue\":true }"
-      },
-      {
-        "name": "schema",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "mandatory": true,
-        "uiHint": "{ \"singleValue\":true }"
-      },
-      {
-        "name": "table",
-        "matcherOptions": {
-          "wildCard": "true"
-        },
-        "lookupSupported": true,
-        "mandatory": true,
-        "uiHint": "{ \"singleValue\":true }"
-      }
-    ]
-  }
-
-}
\ No newline at end of file
+  ]
+}
diff -ruN apache-ranger-2.3.0.orig/distro/src/main/assembly/admin-web.xml apache-ranger-2.3.0/distro/src/main/assembly/admin-web.xml
--- apache-ranger-2.3.0.orig/distro/src/main/assembly/admin-web.xml	2023-01-25 10:29:59.936011833 +0800
+++ apache-ranger-2.3.0/distro/src/main/assembly/admin-web.xml	2023-01-25 10:33:12.100030055 +0800
@@ -474,8 +474,8 @@
         <fileMode>644</fileMode>
         <includes>
           <include>org.apache.ranger:ranger-presto-plugin</include>
-          <include>io.prestosql:presto-spi:jar:${presto.version}</include>
-          <include>io.prestosql:presto-jdbc:jar:${presto.version}</include>
+          <include>com.facebook.presto:presto-spi:jar:${presto.version}</include>
+          <include>com.facebook.presto:presto-jdbc:jar:${presto.version}</include>
         </includes>
       </binaries>
     </moduleSet>
diff -ruN apache-ranger-2.3.0.orig/distro/src/main/assembly/plugin-presto.xml apache-ranger-2.3.0/distro/src/main/assembly/plugin-presto.xml
--- apache-ranger-2.3.0.orig/distro/src/main/assembly/plugin-presto.xml	2023-01-25 10:29:59.937011849 +0800
+++ apache-ranger-2.3.0/distro/src/main/assembly/plugin-presto.xml	2023-01-26 20:41:28.414085129 +0800
@@ -40,6 +40,9 @@
                     <include>com.google.guava:guava:jar:${presto.guava.version}</include>
                     <include>io.airlift:bootstrap:jar:${presto.airlift.version}</include>
                     <include>io.airlift:log:jar:${presto.airlift.version}</include>
+                    <include>org.apache.commons:commons-lang3:jar:${commons.lang3.version}</include>
+                    <include>org.apache.commons:commons-lang3</include>
+                    <include>org.apache.commons:commons-compress:jar:${commons.compress.version}</include>
                     <include>io.airlift:log-manager:jar:${presto.airlift.version}</include>
                     <include>io.airlift:configuration:jar:${presto.airlift.version}</include>
                     <include>javax.validation:validation-api:jar:${presto.validation-api.version}</include>
@@ -81,6 +84,9 @@
                     <include>commons-codec:commons-codec</include>
                     <include>commons-io:commons-io:jar:${commons.io.version}</include>
                     <include>commons-lang:commons-lang:jar:${commons.lang.version}</include>
+                    <include>org.apache.commons:commons-lang3:jar:${commons.lang3.version}</include>
+                    <include>org.apache.commons:commons-lang3</include>
+                    <include>org.apache.commons:commons-compress:jar:${commons.compress.version}</include>
                     <include>commons-logging:commons-logging:jar:${commons.logging.version}</include>
                     <include>com.google.guava:guava:jar:${google.guava.version}</include>
                     <include>com.google.protobuf:protobuf-java:jar:${protobuf-java.version}</include>
@@ -138,6 +144,9 @@
                     <include>org.apache.commons:commons-configuration2:jar:${commons.configuration.version}</include>
                     <include>commons-io:commons-io:jar:${commons.io.version}</include>
                     <include>commons-lang:commons-lang</include>
+                    <include>org.apache.commons:commons-lang3:jar:${commons.lang3.version}</include>
+                    <include>org.apache.commons:commons-lang3</include>
+                    <include>org.apache.commons:commons-compress:jar:${commons.compress.version}</include>
                     <include>commons-logging:commons-logging:jar:${commons.logging.version}</include>
                     <include>com.google.guava:guava:jar:${google.guava.version}</include>
                     <include>org.slf4j:slf4j-api:jar:${slf4j-api.version}</include>
diff -ruN apache-ranger-2.3.0.orig/plugin-presto/pom.xml apache-ranger-2.3.0/plugin-presto/pom.xml
--- apache-ranger-2.3.0.orig/plugin-presto/pom.xml	2023-01-25 10:29:59.955012132 +0800
+++ apache-ranger-2.3.0/plugin-presto/pom.xml	2023-01-26 12:41:22.408025017 +0800
@@ -33,12 +33,12 @@
     </parent>
     <dependencies>
         <dependency>
-            <groupId>io.prestosql</groupId>
+            <groupId>com.facebook.presto</groupId>
             <artifactId>presto-spi</artifactId>
             <version>${presto.version}</version>
         </dependency>
         <dependency>
-            <groupId>io.prestosql</groupId>
+            <groupId>com.facebook.presto</groupId>
             <artifactId>presto-jdbc</artifactId>
             <version>${presto.version}</version>
         </dependency>
@@ -87,6 +87,11 @@
             <artifactId>protobuf-java</artifactId>
             <version>${protobuf-java.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+            <version>${commons.lang3.version}</version>
+        </dependency>
     </dependencies>
     <build>
         <testResources>
diff -ruN apache-ranger-2.3.0.orig/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java apache-ranger-2.3.0/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java
--- apache-ranger-2.3.0.orig/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java	2023-01-25 10:29:59.955012132 +0800
+++ apache-ranger-2.3.0/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java	2023-01-27 00:04:20.284950661 +0800
@@ -1,45 +1,50 @@
 /*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.ranger.authorization.presto.authorizer;
 
-import io.prestosql.spi.connector.CatalogSchemaName;
-import io.prestosql.spi.connector.CatalogSchemaRoutineName;
-import io.prestosql.spi.connector.CatalogSchemaTableName;
-import io.prestosql.spi.connector.ColumnMetadata;
-import io.prestosql.spi.connector.SchemaTableName;
-import io.prestosql.spi.security.AccessDeniedException;
-import io.prestosql.spi.security.PrestoPrincipal;
-import io.prestosql.spi.security.Privilege;
-import io.prestosql.spi.security.SystemAccessControl;
-import io.prestosql.spi.security.SystemSecurityContext;
-import io.prestosql.spi.security.ViewExpression;
-import io.prestosql.spi.type.Type;
+
+import com.facebook.presto.spi.security.Identity;
+import com.facebook.presto.spi.security.AccessDeniedException;
+import com.facebook.presto.spi.security.PrestoPrincipal;
+import com.facebook.presto.spi.security.Privilege;
+import com.facebook.presto.spi.security.AccessControlContext;
+import com.facebook.presto.spi.security.AuthorizedIdentity;
+import com.facebook.presto.spi.security.SystemAccessControl;
+import com.facebook.presto.spi.security.SelectedRole;
+
+
+import com.facebook.presto.common.CatalogSchemaName;
+import com.facebook.presto.spi.CatalogSchemaTableName;
+import com.facebook.presto.spi.SchemaTableName;
+
+
+import java.security.cert.X509Certificate;
+//import java.util.Collections;
+
+//import static java.util.Objects.requireNonNull;
+
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;
-import org.apache.ranger.plugin.model.RangerPolicy;
-import org.apache.ranger.plugin.model.RangerServiceDef;
+//import org.apache.ranger.plugin.model.RangerPolicy;
+//import org.apache.ranger.plugin.model.RangerServiceDef;
 import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;
 import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;
 import org.apache.ranger.plugin.policyengine.RangerAccessResult;
 import org.apache.ranger.plugin.service.RangerBasePlugin;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -68,6 +73,8 @@
   final public static String RANGER_PRESTO_DEFAULT_HADOOP_CONF = "presto-ranger-site.xml";
   final public static String RANGER_PRESTO_SERVICETYPE = "presto";
   final public static String RANGER_PRESTO_APPID = "presto";
+  final public static String RANGER_PRESTO_DEFAULT_ADMINID = "rangeradmin";
+  final public static String RANGER_PRESTO_ADMINID_KEY = "RANGER_PRESTO_ADMINID";
 
   final private RangerBasePlugin rangerPlugin;
 
@@ -118,605 +125,79 @@
     rangerPlugin.setResultProcessor(new RangerDefaultAuditHandler());
   }
 
-
-  /** FILTERING AND DATA MASKING **/
-
-  private RangerAccessResult getDataMaskResult(RangerPrestoAccessRequest request) {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("==> getDataMaskResult(request=" + request + ")");
-    }
-
-    RangerAccessResult ret = rangerPlugin.evalDataMaskPolicies(request, null);
-
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("<== getDataMaskResult(request=" + request + "): ret=" + ret);
-    }
-
-    return ret;
-  }
-
-  private RangerAccessResult getRowFilterResult(RangerPrestoAccessRequest request) {
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("==> getRowFilterResult(request=" + request + ")");
-    }
-
-    RangerAccessResult ret = rangerPlugin.evalRowFilterPolicies(request, null);
-
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("<== getRowFilterResult(request=" + request + "): ret=" + ret);
-    }
-
-    return ret;
-  }
-
-  private boolean isDataMaskEnabled(RangerAccessResult result) {
-    return result != null && result.isMaskEnabled();
-  }
-
-  private boolean isRowFilterEnabled(RangerAccessResult result) {
-    return result != null && result.isRowFilterEnabled();
-  }
-
-  @Override
-  public Optional<ViewExpression> getRowFilter(SystemSecurityContext context, CatalogSchemaTableName tableName) {
-    RangerPrestoAccessRequest request = createAccessRequest(createResource(tableName), context, PrestoAccessType.SELECT);
-    RangerAccessResult result = getRowFilterResult(request);
-
-    ViewExpression viewExpression = null;
-    if (isRowFilterEnabled(result)) {
-      String filter = result.getFilterExpr();
-      viewExpression = new ViewExpression(
-        context.getIdentity().getUser(),
-        Optional.of(tableName.getCatalogName()),
-        Optional.of(tableName.getSchemaTableName().getSchemaName()),
-        filter
-      );
-    }
-    return Optional.ofNullable(viewExpression);
-  }
-
-  @Override
-  public Optional<ViewExpression> getColumnMask(SystemSecurityContext context, CatalogSchemaTableName tableName, String columnName, Type type) {
-    RangerPrestoAccessRequest request = createAccessRequest(
-      createResource(tableName.getCatalogName(), tableName.getSchemaTableName().getSchemaName(),
-        tableName.getSchemaTableName().getTableName(), Optional.of(columnName)),
-      context, PrestoAccessType.SELECT);
-    RangerAccessResult result = getDataMaskResult(request);
-
-    ViewExpression viewExpression = null;
-    if (isDataMaskEnabled(result)) {
-      String                maskType    = result.getMaskType();
-      RangerServiceDef.RangerDataMaskTypeDef maskTypeDef = result.getMaskTypeDef();
-      String transformer	= null;
-
-      if (maskTypeDef != null) {
-        transformer = maskTypeDef.getTransformer();
-      }
-
-      if(StringUtils.equalsIgnoreCase(maskType, RangerPolicy.MASK_TYPE_NULL)) {
-        transformer = "NULL";
-      } else if(StringUtils.equalsIgnoreCase(maskType, RangerPolicy.MASK_TYPE_CUSTOM)) {
-        String maskedValue = result.getMaskedValue();
-
-        if(maskedValue == null) {
-          transformer = "NULL";
-        } else {
-          transformer = maskedValue;
-        }
-      }
-
-      if(StringUtils.isNotEmpty(transformer)) {
-        transformer = transformer.replace("{col}", columnName).replace("{type}", type.getDisplayName());
-      }
-
-      viewExpression = new ViewExpression(
-        context.getIdentity().getUser(),
-        Optional.of(tableName.getCatalogName()),
-        Optional.of(tableName.getSchemaTableName().getSchemaName()),
-        transformer
-      );
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("getColumnMask: user: %s, catalog: %s, schema: %s, transformer: %s");
-      }
-
-    }
-
-    return Optional.ofNullable(viewExpression);
-  }
-
-  @Override
-  public Set<String> filterCatalogs(SystemSecurityContext context, Set<String> catalogs) {
-    LOG.debug("==> RangerSystemAccessControl.filterCatalogs("+ catalogs + ")");
-    Set<String> filteredCatalogs = new HashSet<>(catalogs.size());
-    for (String catalog: catalogs) {
-      if (hasPermission(createResource(catalog), context, PrestoAccessType.SELECT)) {
-        filteredCatalogs.add(catalog);
-      }
-    }
-    return filteredCatalogs;
-  }
-
-  @Override
-  public Set<String> filterSchemas(SystemSecurityContext context, String catalogName, Set<String> schemaNames) {
-    LOG.debug("==> RangerSystemAccessControl.filterSchemas(" + catalogName + ")");
-    Set<String> filteredSchemaNames = new HashSet<>(schemaNames.size());
-    for (String schemaName: schemaNames) {
-      if (hasPermission(createResource(catalogName, schemaName), context, PrestoAccessType.SELECT)) {
-        filteredSchemaNames.add(schemaName);
-      }
-    }
-    return filteredSchemaNames;
-  }
-
-  @Override
-  public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames) {
-    LOG.debug("==> RangerSystemAccessControl.filterTables(" + catalogName + ")");
-    Set<SchemaTableName> filteredTableNames = new HashSet<>(tableNames.size());
-    for (SchemaTableName tableName : tableNames) {
-      RangerPrestoResource res = createResource(catalogName, tableName.getSchemaName(), tableName.getTableName());
-      if (hasPermission(res, context, PrestoAccessType.SELECT)) {
-        filteredTableNames.add(tableName);
-      }
-    }
-    return filteredTableNames;
-  }
-
-  /** PERMISSION CHECKS ORDERED BY SYSTEM, CATALOG, SCHEMA, TABLE, VIEW, COLUMN, QUERY, FUNCTIONS, PROCEDURES **/
-
-  /** SYSTEM **/
-
-  @Override
-  public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName) {
-    if (!hasPermission(createSystemPropertyResource(propertyName), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetSystemSessionProperty denied");
-      AccessDeniedException.denySetSystemSessionProperty(propertyName);
-    }
-  }
-
-  @Override
-  public void checkCanImpersonateUser(SystemSecurityContext context, String userName) {
-    if (!hasPermission(createUserResource(userName), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanImpersonateUser(" + userName + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), userName);
-    }
-  }
-
-  @Override
-  public void checkCanSetUser(Optional<Principal> principal, String userName) {
-    // pass as it is deprecated
-  }
-
-  /** CATALOG **/
-  @Override
-  public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, String catalogName, String propertyName) {
-    if (!hasPermission(createCatalogSessionResource(catalogName, propertyName), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetCatalogSessionProperty(" + catalogName + ") denied");
-      AccessDeniedException.denySetCatalogSessionProperty(catalogName, propertyName);
-    }
-  }
-
-  @Override
-  public void checkCanShowRoles(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowRoles(" + catalogName + ") denied");
-      AccessDeniedException.denyShowRoles(catalogName);
-    }
-  }
-
-
-  @Override
-  public void checkCanAccessCatalog(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.USE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanAccessCatalog(" + catalogName + ") denied");
-      AccessDeniedException.denyCatalogAccess(catalogName);
-    }
-  }
-
-  @Override
-  public void checkCanShowSchemas(SystemSecurityContext context, String catalogName) {
-    if (!hasPermission(createResource(catalogName), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowSchemas(" + catalogName + ") denied");
-      AccessDeniedException.denyShowSchemas(catalogName);
-    }
-  }
-
-  /** SCHEMA **/
-
-  @Override
-  public void checkCanSetSchemaAuthorization(SystemSecurityContext context, CatalogSchemaName schema, PrestoPrincipal principal) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetSchemaAuthorization(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denySetSchemaAuthorization(schema.getSchemaName(), principal);
-    }
-  }
-
-  @Override
-  public void checkCanShowCreateSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowCreateSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyShowCreateSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * Create schema is evaluated on the level of the Catalog. This means that it is assumed you have permission
-   * to create a schema when you have create rights on the catalog level
-   */
-  @Override
-  public void checkCanCreateSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyCreateSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * This is evaluated against the schema name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyDropSchema(schema.getSchemaName());
-    }
-  }
-
-  /**
-   * This is evaluated against the schema name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameSchema(SystemSecurityContext context, CatalogSchemaName schema, String newSchemaName) {
-    RangerPrestoResource res = createResource(schema.getCatalogName(), schema.getSchemaName());
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameSchema(" + schema.getSchemaName() + ") denied");
-      AccessDeniedException.denyRenameSchema(schema.getSchemaName(), newSchemaName);
-    }
-  }
-
-  /** TABLE **/
-
-  @Override
-  public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName schema) {
-    if (!hasPermission(createResource(schema), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + schema.toString() + ") denied");
-      AccessDeniedException.denyShowTables(schema.toString());
-    }
-  }
-
-
-  @Override
-  public void checkCanShowCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + table.toString() + ") denied");
-      AccessDeniedException.denyShowCreateTable(table.toString());
-    }
-  }
-
-  /**
-   * Create table is verified on schema level
-   */
-  @Override
-  public void checkCanCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table.getCatalogName(), table.getSchemaTableName().getSchemaName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameTable(SystemSecurityContext context, CatalogSchemaTableName table, CatalogSchemaTableName newTable) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyRenameTable(table.getSchemaTableName().getTableName(), newTable.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanInsertIntoTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.INSERT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanInsertIntoTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyInsertTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanDeleteFromTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.DELETE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDeleteFromTable(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDeleteTable(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  @Override
-  public void checkCanGrantTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal grantee, boolean withGrantOption) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanGrantTablePrivilege(" + table + ") denied");
-      AccessDeniedException.denyGrantTablePrivilege(privilege.toString(), table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal revokee, boolean grantOptionFor) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.REVOKE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRevokeTablePrivilege(" + table + ") denied");
-      AccessDeniedException.denyRevokeTablePrivilege(privilege.toString(), table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanSetTableComment(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanSetTableComment(" + table.toString() + ") denied");
-      AccessDeniedException.denyCommentTable(table.toString());
-    }
-  }
-
-  /**
-   * Create view is verified on schema level
-   */
-  @Override
-  public void checkCanCreateView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    if (!hasPermission(createResource(view.getCatalogName(), view.getSchemaTableName().getSchemaName()), context, PrestoAccessType.CREATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateView(" + view.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateView(view.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    if (!hasPermission(createResource(view), context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropView(" + view.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropView(view.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This check equals the check for checkCanCreateView
-   */
-  @Override
-  public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
-    try {
-      checkCanCreateView(context, table);
-    } catch (AccessDeniedException ade) {
-      LOG.debug("RangerSystemAccessControl.checkCanCreateViewWithSelectFromColumns(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyCreateViewWithSelect(table.getSchemaTableName().getTableName(), context.getIdentity());
-    }
-  }
-
-  /**
-   * This is evaluated against the table name as ownership information is not available
-   */
-  @Override
-  public void checkCanRenameView(SystemSecurityContext context, CatalogSchemaTableName view, CatalogSchemaTableName newView) {
-    if (!hasPermission(createResource(view), context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameView(" + view.toString() + ") denied");
-      AccessDeniedException.denyRenameView(view.toString(), newView.toString());
-    }
-  }
-
-  /** COLUMN **/
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanAddColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      AccessDeniedException.denyAddColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanDropColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.DROP)) {
-      LOG.debug("RangerSystemAccessControl.checkCanDropColumn(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyDropColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanRenameColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    RangerPrestoResource res = createResource(table);
-    if (!hasPermission(res, context, PrestoAccessType.ALTER)) {
-      LOG.debug("RangerSystemAccessControl.checkCanRenameColumn(" + table.getSchemaTableName().getTableName() + ") denied");
-      AccessDeniedException.denyRenameColumn(table.getSchemaTableName().getTableName());
-    }
-  }
-
-  /**
-   * This is evaluated on table level
-   */
-  @Override
-  public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTableName table) {
-    if (!hasPermission(createResource(table), context, PrestoAccessType.SHOW)) {
-      LOG.debug("RangerSystemAccessControl.checkCanShowTables(" + table.toString() + ") denied");
-      AccessDeniedException.denyShowColumns(table.toString());
-    }
-  }
-
-  @Override
-  public void checkCanSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
-    for (RangerPrestoResource res : createResource(table, columns)) {
-      if (!hasPermission(res, context, PrestoAccessType.SELECT)) {
-        LOG.debug("RangerSystemAccessControl.checkCanSelectFromColumns(" + table.getSchemaTableName().getTableName() + ") denied");
-        AccessDeniedException.denySelectColumns(table.getSchemaTableName().getTableName(), columns);
-      }
-    }
-  }
-
-  /**
-   * This is a NOOP, no filtering is applied
-   */
-  @Override
-  public List<ColumnMetadata> filterColumns(SystemSecurityContext context, CatalogSchemaTableName table, List<ColumnMetadata> columns) {
-    return columns;
-  }
-
-  /** QUERY **/
-
-  /**
-   * This is a NOOP. Everyone can execute a query
-   * @param context
-   */
-  @Override
-  public void checkCanExecuteQuery(SystemSecurityContext context) {
-  }
-
-  @Override
-  public void checkCanViewQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    if (!hasPermission(createUserResource(queryOwner), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanViewQueryOwnedBy(" + queryOwner + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), queryOwner);
-    }
-  }
-
-  /**
-   * This is a NOOP, no filtering is applied
-   */
-  @Override
-  public Set<String> filterViewQueryOwnedBy(SystemSecurityContext context, Set<String> queryOwners) {
-    return queryOwners;
-  }
-
-  @Override
-  public void checkCanKillQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    if (!hasPermission(createUserResource(queryOwner), context, PrestoAccessType.IMPERSONATE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanKillQueryOwnedBy(" + queryOwner + ") denied");
-      AccessDeniedException.denyImpersonateUser(context.getIdentity().getUser(), queryOwner);
-    }
-  }
-
-  /** FUNCTIONS **/
-  @Override
-  public void checkCanGrantExecuteFunctionPrivilege(SystemSecurityContext context, String function, PrestoPrincipal grantee, boolean grantOption) {
-    if (!hasPermission(createFunctionResource(function), context, PrestoAccessType.GRANT)) {
-      LOG.debug("RangerSystemAccessControl.checkCanGrantExecuteFunctionPrivilege(" + function + ") denied");
-      AccessDeniedException.denyGrantExecuteFunctionPrivilege(function, context.getIdentity(), grantee.getName());
-    }
-  }
-
-  @Override
-  public void checkCanExecuteFunction(SystemSecurityContext context, String function) {
-    if (!hasPermission(createFunctionResource(function), context, PrestoAccessType.EXECUTE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanExecuteFunction(" + function + ") denied");
-      AccessDeniedException.denyExecuteFunction(function);
-    }
-  }
-
-  /** PROCEDURES **/
-  @Override
-  public void checkCanExecuteProcedure(SystemSecurityContext context, CatalogSchemaRoutineName procedure) {
-    if (!hasPermission(createProcedureResource(procedure), context, PrestoAccessType.EXECUTE)) {
-      LOG.debug("RangerSystemAccessControl.checkCanExecuteFunction(" + procedure.getSchemaRoutineName().getRoutineName() + ") denied");
-      AccessDeniedException.denyExecuteProcedure(procedure.getSchemaRoutineName().getRoutineName());
-    }
-  }
-
   /** HELPER FUNCTIONS **/
 
-  private RangerPrestoAccessRequest createAccessRequest(RangerPrestoResource resource, SystemSecurityContext context, PrestoAccessType accessType) {
-	String userName = null;
-	Set<String> userGroups = null;
-
+  private RangerPrestoAccessRequest createAccessRequest(RangerPrestoResource resource, Identity identity, PrestoAccessType accessType) {
+    String userName = null;
+    Set<String> userGroups = null;
+    Map<String,SelectedRole> userRoles = null;
+  
     if (useUgi) {
-      UserGroupInformation ugi = UserGroupInformation.createRemoteUser(context.getIdentity().getUser());
+      UserGroupInformation ugi = UserGroupInformation.createRemoteUser(identity.getUser());
 
       userName = ugi.getShortUserName();
       String[] groups = ugi != null ? ugi.getGroupNames() : null;
-
+  
       if (groups != null && groups.length > 0) {
         userGroups = new HashSet<>(Arrays.asList(groups));
-      }
+      } 
     } else {
-      userName = context.getIdentity().getUser();
-      userGroups = context.getIdentity().getGroups();
+      userName = identity.getUser();
+      userRoles = identity.getRoles();
+      userGroups = userRoles.keySet();
     }
-
+    
     RangerPrestoAccessRequest request = new RangerPrestoAccessRequest(
       resource,
       userName,
       userGroups,
       accessType
     );
-
+    
     return request;
-  }
+  } 
 
-  private boolean hasPermission(RangerPrestoResource resource, SystemSecurityContext context, PrestoAccessType accessType) {
+  private boolean hasPermission(RangerPrestoResource resource, Identity identity, PrestoAccessType accessType) {
     boolean ret = false;
 
-    RangerPrestoAccessRequest request = createAccessRequest(resource, context, accessType);
+    String admin_user = System.getenv(RANGER_PRESTO_ADMINID_KEY);
+    if (admin_user == null) {
+        admin_user = RANGER_PRESTO_DEFAULT_ADMINID;
+    }
+
+    if (identity.getUser().equals(admin_user)) {
+        return true;
+    }
 
+    RangerPrestoAccessRequest request = createAccessRequest(resource, identity, accessType);
+  
     RangerAccessResult result = rangerPlugin.isAccessAllowed(request);
+
     if (result != null && result.getIsAllowed()) {
       ret = true;
     }
 
+    if (ret) {
+        LOG.debug("hasPermission(" + identity.getUser() + "," + accessType + ") -> true");
+    } else {
+        LOG.debug("hasPermission(" + identity.getUser() + "," + accessType + ") -> false");
+    }
+  
     return ret;
   }
 
-  private static RangerPrestoResource createUserResource(String userName) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_USER, userName);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createFunctionResource(String function) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_FUNCTION, function);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createProcedureResource(CatalogSchemaRoutineName procedure) {
+  private static RangerPrestoResource createSystemPropertyResource(String property) {
     RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_CATALOG, procedure.getCatalogName());
-    res.setValue(RangerPrestoResource.KEY_SCHEMA, procedure.getSchemaRoutineName().getSchemaName());
-    res.setValue(RangerPrestoResource.KEY_PROCEDURE, procedure.getSchemaRoutineName().getRoutineName());
-
+    res.setValue(RangerPrestoResource.KEY_SYSTEM_PROPERTY, property);
+      
     return res;
-  }
+  }   
 
   private static RangerPrestoResource createCatalogSessionResource(String catalogName, String propertyName) {
     RangerPrestoResource res = new RangerPrestoResource();
     res.setValue(RangerPrestoResource.KEY_CATALOG, catalogName);
     res.setValue(RangerPrestoResource.KEY_SESSION_PROPERTY, propertyName);
-
-    return res;
-  }
-
-  private static RangerPrestoResource createSystemPropertyResource(String property) {
-    RangerPrestoResource res = new RangerPrestoResource();
-    res.setValue(RangerPrestoResource.KEY_SYSTEM_PROPERTY, property);
-
+  
     return res;
   }
 
@@ -763,6 +244,420 @@
     }
     return colRequests;
   }
+
+    /**
+     * Check if the principal is allowed to be the specified user.
+     *
+     * @throws AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanSetUser(Identity identity, AccessControlContext context, Optional<Principal> principal, String userName) {
+    }
+
+    @Override
+    public AuthorizedIdentity selectAuthorizedIdentity(Identity identity, AccessControlContext context, String userName, List<X509Certificate> certificates)
+    {
+        return new AuthorizedIdentity(userName, "", true);
+    }
+
+    /**
+     * Check if the query is unexpectedly modified using the credentials passed in the identity.
+     *
+     * @throws AccessDeniedException if query is modified.
+     */
+    @Override
+    public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query) {
+    }
+
+    /**
+     * Check if identity is allowed to set the specified system property.
+     *
+     * @throws AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName) {
+          LOG.debug("RangerSystemAccessControl.checkCanSetSystemSessionProperty(" + propertyName + ")");
+        if (!hasPermission(createSystemPropertyResource(propertyName), identity, PrestoAccessType.ALTER)) {
+
+          AccessDeniedException.denySetSystemSessionProperty(propertyName);
+        }
+    }
+
+    /**
+     * Check if identity is allowed to access the specified catalog
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanAccessCatalog(" + catalogName + ")");
+        if (!hasPermission(createResource(catalogName), identity, PrestoAccessType.USE)) {
+          AccessDeniedException.denyCatalogAccess(catalogName);
+        }
+    }
+
+    /**
+     * Filter the list of catalogs to those visible to the identity.
+     */
+    @Override
+    public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs)
+    {
+        LOG.debug("==> RangerSystemAccessControl.filterCatalogs("+ catalogs + ")");
+        Set<String> filteredCatalogs = new HashSet<>(catalogs.size());
+        for (String catalog: catalogs) {
+          if (hasPermission(createResource(catalog), identity, PrestoAccessType.SELECT)) {
+            filteredCatalogs.add(catalog);
+          }
+        }
+        return filteredCatalogs;
+    }
+
+    /**
+     * Check if identity is allowed to create the specified schema in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanCreateSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanCreateSchema(" + schema.getCatalogName() + ")");
+        if (!hasPermission(createResource(schema.getCatalogName()), identity, PrestoAccessType.CREATE)) {
+          AccessDeniedException.denyCreateSchema(schema.getSchemaName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to drop the specified schema in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanDropSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanDropSchema(" + schema.getCatalogName() + ", " + schema.getSchemaName() + ")");
+        if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), identity, PrestoAccessType.DROP)) {
+          AccessDeniedException.denyDropSchema(schema.getSchemaName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to rename the specified schema in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanRenameSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema, String newSchemaName)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanRenameSchema(" + schema.getCatalogName() + ", " + schema.getSchemaName() + ") denied");
+        RangerPrestoResource res = createResource(schema.getCatalogName(), schema.getSchemaName());
+        if (!hasPermission(res, identity, PrestoAccessType.ALTER)) {
+          AccessDeniedException.denyRenameSchema(schema.getSchemaName(), newSchemaName);
+        }
+    }
+
+    /**
+     * Check if identity is allowed to execute SHOW SCHEMAS in a catalog.
+     * <p>
+     * NOTE: This method is only present to give users an error message when listing is not allowed.
+     * The {@link #filterSchemas} method must filter all results for unauthorized users,
+     * since there are multiple ways to list schemas.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanShowSchemas(Identity identity, AccessControlContext context, String catalogName)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanShowSchemas(" + catalogName + ")");
+        if (!hasPermission(createResource(catalogName), identity, PrestoAccessType.SHOW)) {
+          AccessDeniedException.denyShowSchemas(catalogName);
+        }
+    }
+
+    /**
+     * Filter the list of schemas in a catalog to those visible to the identity.
+     */
+    @Override
+    public Set<String> filterSchemas(Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames)
+    {
+        LOG.debug("==> RangerSystemAccessControl.filterSchemas(" + catalogName + ")");
+        Set<String> filteredSchemaNames = new HashSet<>(schemaNames.size());
+        for (String schemaName: schemaNames) {
+          if (hasPermission(createResource(catalogName, schemaName), identity, PrestoAccessType.SELECT)) {
+            filteredSchemaNames.add(schemaName);
+          } 
+        }
+        return filteredSchemaNames;
+    }
+
+    /**
+     * Check if identity is allowed to create the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanCreateTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanCreateTable(" + table.getCatalogName() + ", " + table.getSchemaTableName().getSchemaName() + ")");
+        if (!hasPermission(createResource(table.getCatalogName(), table.getSchemaTableName().getSchemaName()), identity, PrestoAccessType.CREATE)) {
+          AccessDeniedException.denyCreateTable(table.getSchemaTableName().getTableName());
+        } 
+    }
+
+    /**
+     * Check if identity is allowed to drop the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanDropTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanDropTable(" + table.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(table), identity, PrestoAccessType.DROP)) {
+          AccessDeniedException.denyDropTable(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to rename the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanRenameTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table, CatalogSchemaTableName newTable)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanRenameTable(" + table.getSchemaTableName().getTableName() + ")");
+        RangerPrestoResource res = createResource(table);
+        if (!hasPermission(res, identity, PrestoAccessType.ALTER)) {
+          AccessDeniedException.denyRenameTable(table.getSchemaTableName().getTableName(), newTable.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to show metadata of tables by executing SHOW TABLES, SHOW GRANTS etc. in a catalog.
+     * <p>
+     * NOTE: This method is only present to give users an error message when listing is not allowed.
+     * The {@link #filterTables} method must filter all results for unauthorized users,
+     * since there are multiple ways to list tables.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanShowTablesMetadata(Identity identity, AccessControlContext context, CatalogSchemaName schema)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanShowTablesMetadata(" + schema.getCatalogName() + ", " + schema.getSchemaName() + ")");
+        if (!hasPermission(createResource(schema.getCatalogName(), schema.getSchemaName()), identity, PrestoAccessType.SHOW)) {
+          AccessDeniedException.denyShowTablesMetadata(schema.getSchemaName());
+        }
+    }
+
+    /**
+     * Filter the list of tables and views to those visible to the identity.
+     */
+    @Override
+    public Set<SchemaTableName> filterTables(Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames)
+    {
+        Set<SchemaTableName> filteredTableNames = new HashSet<>(tableNames.size());
+        for (SchemaTableName tableName : tableNames) {
+          LOG.debug("RangerSystemAccessControl.filterTables(" + catalogName + ", " + tableName.getSchemaName() + ", " + tableName.getTableName() + ")");
+          RangerPrestoResource res = createResource(catalogName, tableName.getSchemaName(), tableName.getTableName());
+          if (hasPermission(res, identity, PrestoAccessType.SELECT)) {
+            filteredTableNames.add(tableName);
+          }
+        }
+        return filteredTableNames;
+    }
+
+    /**
+     * Check if identity is allowed to add columns to the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanAddColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanAddColumn(" + table.getSchemaTableName().getTableName() + ")");
+        RangerPrestoResource res = createResource(table);
+        if (!hasPermission(res, identity, PrestoAccessType.ALTER)) {
+          AccessDeniedException.denyAddColumn(table.getSchemaTableName().getTableName());
+        } 
+    }
+
+    /**
+     * Check if identity is allowed to drop columns from the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanDropColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanDropColumn(" + table.getSchemaTableName().getTableName() + ")");
+        RangerPrestoResource res = createResource(table);
+        if (!hasPermission(res, identity, PrestoAccessType.DROP)) {
+
+          AccessDeniedException.denyDropColumn(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to rename a column in the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanRenameColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        RangerPrestoResource res = createResource(table);
+        LOG.debug("RangerSystemAccessControl.checkCanRenameColumn(" + table.getSchemaTableName().getTableName() + ") denied");
+        if (!hasPermission(res, identity, PrestoAccessType.ALTER)) {
+          AccessDeniedException.denyRenameColumn(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to select from the specified columns in a relation.  The column set can be empty.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanSelectFromColumns(Identity identity, AccessControlContext context, CatalogSchemaTableName table, Set<String> columns)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanSelectFromColumns(" + table.getSchemaTableName().getTableName() + ", " + columns + ")");
+        for (RangerPrestoResource res : createResource(table, columns)) {
+          if (!hasPermission(res, identity, PrestoAccessType.SELECT)) {
+            AccessDeniedException.denySelectColumns(table.getSchemaTableName().getTableName(), columns);
+          }
+        }
+    }
+
+    /**
+     * Check if identity is allowed to insert into the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanInsertIntoTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanInsertIntoTable(" + table.getSchemaTableName().getTableName() + ")");
+        RangerPrestoResource res = createResource(table);
+        if (!hasPermission(res, identity, PrestoAccessType.INSERT)) {
+          AccessDeniedException.denyInsertTable(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to delete from the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanDeleteFromTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanDeleteFromTable(" + table.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(table), identity, PrestoAccessType.DELETE)) {
+          AccessDeniedException.denyDeleteTable(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to truncate the specified table in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanTruncateTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanTruncateTable(" + table.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(table), identity, PrestoAccessType.DELETE)) {
+          AccessDeniedException.denyDeleteTable(table.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to create the specified view in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanCreateView(Identity identity, AccessControlContext context, CatalogSchemaTableName view)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanCreateView(" + view.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(view.getCatalogName(), view.getSchemaTableName().getSchemaName()), identity, PrestoAccessType.CREATE)) {
+          AccessDeniedException.denyCreateView(view.getSchemaTableName().getTableName());
+        } 
+    }
+
+    /**
+     * Check if identity is allowed to drop the specified view in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanDropView(Identity identity, AccessControlContext context, CatalogSchemaTableName view)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanDropView(" + view.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(view), identity, PrestoAccessType.DROP)) {
+          AccessDeniedException.denyDropView(view.getSchemaTableName().getTableName());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to create a view that selects from the specified columns in a relation.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanCreateViewWithSelectFromColumns(Identity identity, AccessControlContext context, CatalogSchemaTableName table, Set<String> columns)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanCreateViewWithSelectFromColumns(" + table.getSchemaTableName().getTableName() + ", " + columns + ")");
+        try {
+          checkCanCreateView(identity, context, table);
+        } catch (AccessDeniedException ade) {
+          AccessDeniedException.denyCreateViewWithSelect(table.getSchemaTableName().getTableName(), identity);
+        }
+    }
+
+    /**
+     * Check if identity is allowed to set the specified property in a catalog.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanSetCatalogSessionProperty(Identity identity, AccessControlContext context, String catalogName, String propertyName)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanSetCatalogSessionProperty(" + catalogName + ", " + propertyName + ")");
+        if (!hasPermission(createCatalogSessionResource(catalogName, propertyName), identity, PrestoAccessType.ALTER)) {
+          AccessDeniedException.denySetCatalogSessionProperty(catalogName, propertyName);
+        }
+    }
+
+    /**
+     * Check if identity is allowed to grant the specified privilege to the grantee on the specified table.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanGrantTablePrivilege(Identity identity, AccessControlContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal grantee, boolean withGrantOption)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanGrantTablePrivilege(" + table.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(table), identity, PrestoAccessType.GRANT)) {
+          AccessDeniedException.denyGrantTablePrivilege(privilege.toString(), table.toString());
+        }
+    }
+
+    /**
+     * Check if identity is allowed to revoke the specified privilege on the specified table from the revokee.
+     *
+     * @throws com.facebook.presto.spi.security.AccessDeniedException if not allowed
+     */
+    @Override
+    public void checkCanRevokeTablePrivilege(Identity identity, AccessControlContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal revokee, boolean grantOptionFor)
+    {
+        LOG.debug("RangerSystemAccessControl.checkCanRevokeTablePrivilege(" + table.getSchemaTableName().getTableName() + ")");
+        if (!hasPermission(createResource(table), identity, PrestoAccessType.REVOKE)) {
+          AccessDeniedException.denyRevokeTablePrivilege(privilege.toString(), table.toString());
+        }
+    }
 }
 
 class RangerPrestoResource
@@ -830,6 +725,7 @@
   }
 }
 
+
 class RangerPrestoAccessRequest
   extends RangerAccessRequestImpl {
   public RangerPrestoAccessRequest(RangerPrestoResource resource,
@@ -843,4 +739,4 @@
 
 enum PrestoAccessType {
   CREATE, DROP, SELECT, INSERT, DELETE, USE, ALTER, ALL, GRANT, REVOKE, SHOW, IMPERSONATE, EXECUTE;
-}
\ No newline at end of file
+}
diff -ruN apache-ranger-2.3.0.orig/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java apache-ranger-2.3.0/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java
--- apache-ranger-2.3.0.orig/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java	2023-01-25 10:29:59.955012132 +0800
+++ apache-ranger-2.3.0/plugin-presto/src/test/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlTest.java	2023-01-25 22:45:11.934595167 +0800
@@ -14,25 +14,27 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/*
 package org.apache.ranger.authorization.presto.authorizer;
 
 import com.google.common.collect.ImmutableSet;
-import io.prestosql.spi.connector.CatalogSchemaName;
-import io.prestosql.spi.connector.CatalogSchemaRoutineName;
-import io.prestosql.spi.connector.CatalogSchemaTableName;
-import io.prestosql.spi.connector.SchemaTableName;
-import io.prestosql.spi.security.AccessDeniedException;
-import io.prestosql.spi.security.Identity;
-import io.prestosql.spi.security.PrestoPrincipal;
-import io.prestosql.spi.security.SystemSecurityContext;
+import com.facebook.presto.common.CatalogSchemaName
+import com.facebook.presto.spi.connector.CatalogSchemaRoutineName;
+import com.facebook.presto.spi.connector.CatalogSchemaTableName;
+import com.facebook.presto.spi.connector.SchemaTableName;
+import com.facebook.presto.spi.security.AccessDeniedException;
+import com.facebook.presto.spi.security.Identity;
+import com.facebook.presto.spi.security.PrestoPrincipal;
+import com.facebook.presto.spi.QueryId;
+import com.facebook.presto.spi.security.AccessControlContext;
+
 
-import static io.prestosql.spi.security.PrincipalType.USER;
-import static io.prestosql.spi.security.Privilege.SELECT;
+import static com.facebook.presto.spi.security.PrincipalType.USER;
+import static com.facebook.presto.spi.security.Privilege.SELECT;
 import static org.junit.Assert.*;
 
-import io.prestosql.spi.security.ViewExpression;
-import io.prestosql.spi.type.VarcharType;
+import com.facebook.presto.spi.security.ViewExpression;
+import com.facebook.presto.spi.type.VarcharType;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -71,30 +73,9 @@
   }
 
   @Test
-  @SuppressWarnings("PMD")
-  public void testCanSetUserOperations() {
-    try {
-      accessControlManager.checkCanImpersonateUser(context(alice), bob.getUser());
-      throw new AssertionError("expected AccessDeniedExeption");
-    }
-    catch (AccessDeniedException expected) {
-    }
-
-    accessControlManager.checkCanImpersonateUser(context(admin), bob.getUser());
-
-    try {
-      accessControlManager.checkCanImpersonateUser(context(kerberosInvalidAlice), bob.getUser());
-      throw new AssertionError("expected AccessDeniedExeption");
-    }
-    catch (AccessDeniedException expected) {
-    }
-
-  }
-
-  @Test
   public void testCatalogOperations()
   {
-    assertEquals(accessControlManager.filterCatalogs(context(alice), allCatalogs), allCatalogs);
+    assertEquals(accessControlManager.filterCatalogs(alice, context(alice), allCatalogs), allCatalogs);
     Set<String> bobCatalogs = ImmutableSet.of("open-to-all", "all-allowed");
     assertEquals(accessControlManager.filterCatalogs(context(bob), allCatalogs), bobCatalogs);
     //Set<String> nonAsciiUserCatalogs = ImmutableSet.of("open-to-all", "all-allowed", "\u0200\u0200\u0200");
@@ -192,4 +173,4 @@
   private SystemSecurityContext context(Identity id) {
     return new SystemSecurityContext(id, Optional.empty());
   }
-}
\ No newline at end of file
+}*/
diff -ruN apache-ranger-2.3.0.orig/plugin-presto/src/test/resources/presto-policies.json apache-ranger-2.3.0/plugin-presto/src/test/resources/presto-policies.json
--- apache-ranger-2.3.0.orig/plugin-presto/src/test/resources/presto-policies.json	2023-01-25 10:29:59.955012132 +0800
+++ apache-ranger-2.3.0/plugin-presto/src/test/resources/presto-policies.json	2023-01-25 10:33:12.101030070 +0800
@@ -1056,7 +1056,7 @@
         "validationRegEx": "",
         "validationMessage": "",
         "uiHint": "",
-        "defaultValue": "io.prestosql.jdbc.PrestoDriver"
+        "defaultValue": "com.facebook.presto.jdbc.PrestoDriver"
       },
       {
         "itemId": 4,
diff -ruN apache-ranger-2.3.0.orig/pom.xml apache-ranger-2.3.0/pom.xml
--- apache-ranger-2.3.0.orig/pom.xml	2023-01-25 10:30:00.066013875 +0800
+++ apache-ranger-2.3.0/pom.xml	2023-01-25 18:22:00.074408209 +0800
@@ -178,7 +178,7 @@
         <orc.core.version>1.6.7</orc.core.version>
         <owasp-java-html-sanitizer.version>r239</owasp-java-html-sanitizer.version>
         <paranamer.version>2.3</paranamer.version>
-        <presto.version>333</presto.version>
+        <presto.version>0.278.1</presto.version>
         <trino.version>377</trino.version>
         <poi.version>5.2.2</poi.version>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/pom.xml apache-ranger-2.3.0/ranger-presto-plugin-shim/pom.xml
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/pom.xml	2023-01-25 10:29:59.964012273 +0800
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/pom.xml	2023-01-25 10:33:12.099030039 +0800
@@ -37,7 +37,7 @@
             <version>${project.version}</version>
         </dependency>
         <dependency>
-            <groupId>io.prestosql</groupId>
+            <groupId>com.facebook.presto</groupId>
             <artifactId>presto-spi</artifactId>
             <version>${presto.version}</version>
         </dependency>
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/PrestoRangerPlugin.java apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/PrestoRangerPlugin.java
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/PrestoRangerPlugin.java	2023-01-25 10:29:59.964012273 +0800
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/PrestoRangerPlugin.java	2023-01-25 10:33:12.098030023 +0800
@@ -13,8 +13,8 @@
  */
 package org.apache.ranger.authorization.presto.authorizer;
 
-import io.prestosql.spi.Plugin;
-import io.prestosql.spi.security.SystemAccessControlFactory;
+import com.facebook.presto.spi.Plugin;
+import com.facebook.presto.spi.security.SystemAccessControlFactory;
 
 import java.util.ArrayList;
 
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlFactory.java apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlFactory.java
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlFactory.java	2023-01-25 10:29:59.964012273 +0800
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControlFactory.java	2023-01-25 10:33:12.095029976 +0800
@@ -16,8 +16,8 @@
 import com.google.inject.Injector;
 import com.google.inject.Scopes;
 import io.airlift.bootstrap.Bootstrap;
-import io.prestosql.spi.security.SystemAccessControl;
-import io.prestosql.spi.security.SystemAccessControlFactory;
+import com.facebook.presto.spi.security.SystemAccessControl;
+import com.facebook.presto.spi.security.SystemAccessControlFactory;
 
 import java.util.Map;
 
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java	2023-01-25 10:29:59.964012273 +0800
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java	2023-01-26 23:31:57.298340896 +0800
@@ -13,23 +13,20 @@
  */
 package org.apache.ranger.authorization.presto.authorizer;
 
-import io.prestosql.spi.connector.CatalogSchemaName;
-import io.prestosql.spi.connector.CatalogSchemaRoutineName;
-import io.prestosql.spi.connector.CatalogSchemaTableName;
-import io.prestosql.spi.connector.ColumnMetadata;
-import io.prestosql.spi.connector.SchemaTableName;
-import io.prestosql.spi.security.PrestoPrincipal;
-import io.prestosql.spi.security.Privilege;
-import io.prestosql.spi.security.SystemAccessControl;
-import io.prestosql.spi.security.SystemSecurityContext;
-import io.prestosql.spi.security.ViewExpression;
-import io.prestosql.spi.type.Type;
+import com.facebook.presto.common.CatalogSchemaName;
+import com.facebook.presto.spi.CatalogSchemaTableName;
+import com.facebook.presto.spi.SchemaTableName;
+import com.facebook.presto.spi.security.PrestoPrincipal;
+import com.facebook.presto.spi.security.Privilege;
+import com.facebook.presto.spi.security.SystemAccessControl;
 import org.apache.ranger.plugin.classloader.RangerPluginClassLoader;
+import com.facebook.presto.spi.security.Identity;
+import com.facebook.presto.spi.security.AccessControlContext;
 
 import javax.inject.Inject;
 import java.security.Principal;
 import java.util.HashMap;
-import java.util.List;
+//import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
@@ -73,31 +70,31 @@
   }
 
   @Override
-  public void checkCanSetSystemSessionProperty(SystemSecurityContext context, String propertyName) {
+  public void checkCanSetSystemSessionProperty(Identity identity, AccessControlContext context, String propertyName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSetSystemSessionProperty(context, propertyName);
+      systemAccessControlImpl.checkCanSetSystemSessionProperty(identity, context, propertyName);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanAccessCatalog(SystemSecurityContext context, String catalogName) {
+  public void checkCanAccessCatalog(Identity identity, AccessControlContext context, String catalogName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanAccessCatalog(context, catalogName);
+      systemAccessControlImpl.checkCanAccessCatalog(identity, context, catalogName);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public Set<String> filterCatalogs(SystemSecurityContext context, Set<String> catalogs) {
+  public Set<String> filterCatalogs(Identity identity, AccessControlContext context, Set<String> catalogs) {
     Set<String> filteredCatalogs;
     try {
       activatePluginClassLoader();
-      filteredCatalogs = systemAccessControlImpl.filterCatalogs(context, catalogs);
+      filteredCatalogs = systemAccessControlImpl.filterCatalogs(identity, context, catalogs);
     } finally {
       deactivatePluginClassLoader();
     }
@@ -105,51 +102,51 @@
   }
 
   @Override
-  public void checkCanCreateSchema(SystemSecurityContext context, CatalogSchemaName schema) {
+  public void checkCanCreateSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanCreateSchema(context, schema);
+      systemAccessControlImpl.checkCanCreateSchema(identity, context, schema);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName schema) {
+  public void checkCanDropSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanDropSchema(context, schema);
+      systemAccessControlImpl.checkCanDropSchema(identity, context, schema);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanRenameSchema(SystemSecurityContext context, CatalogSchemaName schema, String newSchemaName) {
+  public void checkCanRenameSchema(Identity identity, AccessControlContext context, CatalogSchemaName schema, String newSchemaName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanRenameSchema(context, schema, newSchemaName);
+      systemAccessControlImpl.checkCanRenameSchema(identity, context, schema, newSchemaName);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanShowSchemas(SystemSecurityContext context, String catalogName) {
+  public void checkCanShowSchemas(Identity identity, AccessControlContext context, String catalogName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowSchemas(context, catalogName);
+      systemAccessControlImpl.checkCanShowSchemas(identity, context, catalogName);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public Set<String> filterSchemas(SystemSecurityContext context, String catalogName, Set<String> schemaNames) {
+  public Set<String> filterSchemas(Identity identity, AccessControlContext context, String catalogName, Set<String> schemaNames) {
     Set<String> filteredSchemas;
     try {
       activatePluginClassLoader();
-      filteredSchemas = systemAccessControlImpl.filterSchemas(context, catalogName, schemaNames);
+      filteredSchemas = systemAccessControlImpl.filterSchemas(identity, context, catalogName, schemaNames);
     } finally {
       deactivatePluginClassLoader();
     }
@@ -157,370 +154,203 @@
   }
 
   @Override
-  public void checkCanCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
+  public void checkCanCreateTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanCreateTable(context, table);
+      systemAccessControlImpl.checkCanCreateTable(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanDropTable(SystemSecurityContext context, CatalogSchemaTableName table) {
+  public void checkCanDropTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanDropTable(context, table);
+      systemAccessControlImpl.checkCanDropTable(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanRenameTable(SystemSecurityContext context, CatalogSchemaTableName table, CatalogSchemaTableName newTable) {
+  public void checkCanRenameTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table, CatalogSchemaTableName newTable) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanRenameTable(context, table, newTable);
+      systemAccessControlImpl.checkCanRenameTable(identity, context, table, newTable);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
-  @Override
-  public Set<SchemaTableName> filterTables(SystemSecurityContext context, String catalogName, Set<SchemaTableName> tableNames) {
-    Set<SchemaTableName> filteredTableNames;
-    try {
-      activatePluginClassLoader();
-      filteredTableNames = systemAccessControlImpl.filterTables(context, catalogName, tableNames);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-    return filteredTableNames;
-  }
-
-  @Override
-  public void checkCanAddColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanAddColumn(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanDropColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanDropColumn(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanRenameColumn(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanRenameColumn(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
 
   @Override
-  public void checkCanSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
+  public void checkCanShowTablesMetadata(Identity identity, AccessControlContext context, CatalogSchemaName schema) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSelectFromColumns(context, table, columns);
+      systemAccessControlImpl.checkCanShowTablesMetadata(identity, context, schema);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanInsertIntoTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanInsertIntoTable(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanDeleteFromTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanDeleteFromTable(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanCreateView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanCreateView(context, view);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanDropView(SystemSecurityContext context, CatalogSchemaTableName view) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanDropView(context, view);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanCreateViewWithSelectFromColumns(SystemSecurityContext context, CatalogSchemaTableName table, Set<String> columns) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanCreateViewWithSelectFromColumns(context, table, columns);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, String catalogName, String propertyName) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSetCatalogSessionProperty(context, catalogName, propertyName);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanImpersonateUser(SystemSecurityContext context, String userName) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanImpersonateUser(context, userName);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanExecuteQuery(SystemSecurityContext context) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanExecuteQuery(context);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanViewQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanViewQueryOwnedBy(context, queryOwner);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public Set<String> filterViewQueryOwnedBy(SystemSecurityContext context, Set<String> queryOwners) {
-    Set<String> filteredQueryOwners;
-    try {
-      activatePluginClassLoader();
-      filteredQueryOwners = systemAccessControlImpl.filterViewQueryOwnedBy(context, queryOwners);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-    return filteredQueryOwners;
-  }
-
-  @Override
-  public void checkCanKillQueryOwnedBy(SystemSecurityContext context, String queryOwner) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanKillQueryOwnedBy(context, queryOwner);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanShowCreateTable(SystemSecurityContext context, CatalogSchemaTableName table) {
-    try {
-      activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowCreateTable(context, table);
-    } finally {
-      deactivatePluginClassLoader();
-    }
-  }
-
-  @Override
-  public void checkCanSetTableComment(SystemSecurityContext context, CatalogSchemaTableName table) {
+  public Set<SchemaTableName> filterTables(Identity identity, AccessControlContext context, String catalogName, Set<SchemaTableName> tableNames) {
+    Set<SchemaTableName> filteredTableNames;
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSetTableComment(context, table);
+      filteredTableNames = systemAccessControlImpl.filterTables(identity, context, catalogName, tableNames);
     } finally {
       deactivatePluginClassLoader();
     }
+    return filteredTableNames;
   }
 
   @Override
-  public void checkCanShowTables(SystemSecurityContext context, CatalogSchemaName schema) {
+  public void checkCanAddColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowTables(context, schema);
+      systemAccessControlImpl.checkCanAddColumn(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTableName table) {
+  public void checkCanDropColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowColumns(context, table);
+      systemAccessControlImpl.checkCanDropColumn(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public List<ColumnMetadata> filterColumns(SystemSecurityContext context, CatalogSchemaTableName table, List<ColumnMetadata> columns) {
-    List<ColumnMetadata> filteredColumns;
+  public void checkCanRenameColumn(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      filteredColumns = systemAccessControlImpl.filterColumns(context, table, columns);
+      systemAccessControlImpl.checkCanRenameColumn(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
-    return filteredColumns;
   }
 
   @Override
-  public void checkCanRenameView(SystemSecurityContext context, CatalogSchemaTableName view, CatalogSchemaTableName newView) {
+  public void checkCanSelectFromColumns(Identity identity, AccessControlContext context, CatalogSchemaTableName table, Set<String> columns) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanRenameView(context, view, newView);
+      systemAccessControlImpl.checkCanSelectFromColumns(identity, context, table, columns);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanGrantTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal grantee, boolean withGrantOption) {
+  public void checkCanInsertIntoTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanGrantTablePrivilege(context, privilege, table, grantee, withGrantOption);
+      systemAccessControlImpl.checkCanInsertIntoTable(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal revokee, boolean grantOptionFor) {
+  public void checkCanDeleteFromTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanRevokeTablePrivilege(context, privilege, table, revokee, grantOptionFor);
+      systemAccessControlImpl.checkCanDeleteFromTable(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanShowRoles(SystemSecurityContext context, String catalogName) {
+  public void checkCanTruncateTable(Identity identity, AccessControlContext context, CatalogSchemaTableName table) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowRoles(context, catalogName);
+      systemAccessControlImpl.checkCanTruncateTable(identity, context, table);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public Optional<ViewExpression> getRowFilter(SystemSecurityContext context, CatalogSchemaTableName tableName) {
-    Optional<ViewExpression> viewExpression;
+  public void checkCanCreateView(Identity identity, AccessControlContext context, CatalogSchemaTableName view) {
     try {
       activatePluginClassLoader();
-      viewExpression = systemAccessControlImpl.getRowFilter(context, tableName);
+      systemAccessControlImpl.checkCanCreateView(identity, context, view);
     } finally {
       deactivatePluginClassLoader();
     }
-    return viewExpression;
   }
 
   @Override
-  public Optional<ViewExpression> getColumnMask(SystemSecurityContext context, CatalogSchemaTableName tableName, String columnName, Type type) {
-    Optional<ViewExpression> viewExpression;
+  public void checkCanDropView(Identity identity, AccessControlContext context, CatalogSchemaTableName view) {
     try {
       activatePluginClassLoader();
-      viewExpression = systemAccessControlImpl.getColumnMask(context, tableName, columnName, type);
+      systemAccessControlImpl.checkCanDropView(identity, context, view);
     } finally {
       deactivatePluginClassLoader();
     }
-    return viewExpression;
   }
 
   @Override
-  public void checkCanSetUser(Optional<Principal> principal, String userName) {
+  public void checkCanCreateViewWithSelectFromColumns(Identity identity, AccessControlContext context, CatalogSchemaTableName table, Set<String> columns) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSetUser(principal, userName);
+      systemAccessControlImpl.checkCanCreateViewWithSelectFromColumns(identity, context, table, columns);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanGrantExecuteFunctionPrivilege(SystemSecurityContext context, String functionName, PrestoPrincipal grantee, boolean grantOption) {
+  public void checkCanSetCatalogSessionProperty(Identity identity, AccessControlContext context, String catalogName, String propertyName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanGrantExecuteFunctionPrivilege(context, functionName, grantee, grantOption);
+      systemAccessControlImpl.checkCanSetCatalogSessionProperty(identity, context, catalogName, propertyName);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanSetSchemaAuthorization(SystemSecurityContext context, CatalogSchemaName schema, PrestoPrincipal principal) {
+  public void checkCanGrantTablePrivilege(Identity identity, AccessControlContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal grantee, boolean withGrantOption) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanSetSchemaAuthorization(context, schema, principal);
+      systemAccessControlImpl.checkCanGrantTablePrivilege(identity, context, privilege, table, grantee, withGrantOption);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanShowCreateSchema(SystemSecurityContext context, CatalogSchemaName schemaName) {
+  public void checkCanRevokeTablePrivilege(Identity identity, AccessControlContext context, Privilege privilege, CatalogSchemaTableName table, PrestoPrincipal revokee, boolean grantOptionFor) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanShowCreateSchema(context, schemaName);
+      systemAccessControlImpl.checkCanRevokeTablePrivilege(identity, context, privilege, table, revokee, grantOptionFor);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext, CatalogSchemaRoutineName procedure) {
+  public void checkQueryIntegrity(Identity identity, AccessControlContext context, String query) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanExecuteProcedure(systemSecurityContext, procedure);
+      systemAccessControlImpl.checkQueryIntegrity(identity, context, query);
     } finally {
       deactivatePluginClassLoader();
     }
   }
 
   @Override
-  public void checkCanExecuteFunction(SystemSecurityContext systemSecurityContext, String functionName) {
+  public void checkCanSetUser(Identity identity, AccessControlContext context, Optional<Principal> principal, String userName) {
     try {
       activatePluginClassLoader();
-      systemAccessControlImpl.checkCanExecuteFunction(systemSecurityContext, functionName);
+      systemAccessControlImpl.checkCanSetUser(identity, context, principal, userName);
     } finally {
       deactivatePluginClassLoader();
     }
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin	1970-01-01 07:30:00.000000000 +0730
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin	2022-06-25 14:37:08.000000000 +0800
@@ -0,0 +1,15 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+org.apache.ranger.authorization.presto.authorizer.PrestoRangerPlugin
diff -ruN apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/resources/META-INF/services/io.prestosql.spi.Plugin apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/resources/META-INF/services/io.prestosql.spi.Plugin
--- apache-ranger-2.3.0.orig/ranger-presto-plugin-shim/src/main/resources/META-INF/services/io.prestosql.spi.Plugin	2023-01-25 10:29:59.964012273 +0800
+++ apache-ranger-2.3.0/ranger-presto-plugin-shim/src/main/resources/META-INF/services/io.prestosql.spi.Plugin	1970-01-01 07:30:00.000000000 +0730
@@ -1,15 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-org.apache.ranger.authorization.presto.authorizer.PrestoRangerPlugin
